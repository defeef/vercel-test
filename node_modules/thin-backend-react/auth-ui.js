import React, { useState, useEffect } from 'react';
// @ts-expect-error
import { DataSyncController, ihpBackendUrl } from 'thin-backend';
import { didCompleteAuthentication } from 'thin-backend/auth.js';
import * as AuthApi from './auth-api.js';
const DEFAULT_APP_ICON = React.createElement("img", { src: "https://thin-backend-prod.s3.amazonaws.com/public-static/thin-logo-black.svg", width: 64, height: 26 });
export function LoginAndSignUp() {
    const [signUp, setSignUp] = useState(false);
    const [confirmationParameters, setEmailConfirmationParameters] = useEmailConfirmationParameters();
    if (confirmationParameters !== null) {
        const { userId, token } = confirmationParameters;
        return React.createElement(EmailConfirmation, { userId: userId, token: token, onConfirmedAlready: () => setEmailConfirmationParameters(null), onConfirmFailed: () => {
                alert('Confirmation failed');
                setEmailConfirmationParameters(null);
            } });
    }
    if (signUp) {
        return React.createElement(SignUp, { onLoginClick: () => setSignUp(false) });
    }
    else {
        return React.createElement(Login, { onSignUpClick: () => setSignUp(true) });
    }
}
export function Login({ description, onSignUpClick, appIcon = DEFAULT_APP_ICON, loadingSpinner = React.createElement(LoadingSpinner, { small: true }) }) {
    return React.createElement("div", { className: "thin-auth" },
        React.createElement("div", { className: "thin-auth-container" },
            React.createElement("div", { className: "thin-auth-container-inner" },
                React.createElement("div", { className: "thin-auth-box" },
                    React.createElement("div", { className: "thin-auth-icon-container" }, appIcon),
                    React.createElement("h1", null, "Welcome"),
                    React.createElement("p", { className: "thin-auth-description" }, description || 'Please log in to continue with the application.'),
                    React.createElement(LoginForm, { loadingSpinner: loadingSpinner }),
                    React.createElement("p", null,
                        React.createElement("span", { className: "thin-auth-signup" }, "Don't have an account?"),
                        " ",
                        React.createElement("a", { href: ihpBackendUrl('/NewUser'), onClick: () => { event.preventDefault(); onSignUpClick(); } }, "Sign up"))),
                React.createElement("div", { className: "thin-auth-built-with" },
                    React.createElement("a", { href: "https://thin.dev/?ref=NewSessionFooter", target: "_blank" }, "Built with Thin Backend")))));
}
function LoginForm({ loadingSpinner }) {
    const [isLoading, setLoading] = useState(false);
    const [lastError, setLastError] = useState(null);
    const onSubmit = async (event) => {
        const { email, password } = event.currentTarget;
        event.preventDefault();
        setLoading(true);
        setLastError(null);
        const response = await AuthApi.loginWithEmailAndPassword(email.value, password.value);
        if (response.tag === 'LoginSuccessful') {
            const { userId, jwt } = response;
            didCompleteAuthentication(userId, jwt);
        }
        else {
            setLastError(response.tag);
            setLoading(false);
        }
    };
    useEffect(() => {
        // Start the connection if it's not running yet
        // This way we have lower latency for the login
        DataSyncController.getInstance().startConnection();
    }, []);
    return React.createElement("form", { method: "POST", action: "#", onSubmit: onSubmit },
        lastError ? React.createElement(LoginError, { errorType: lastError }) : null,
        React.createElement("input", { className: "thin-auth-form-group", name: "email", type: "email", placeholder: "E-Mail", required: true, autoFocus: true, autoComplete: "email", spellCheck: false }),
        React.createElement("input", { className: "thin-auth-form-group", name: "password", type: "password", placeholder: "Password", autoComplete: "current-password" }),
        React.createElement("p", null,
            React.createElement("a", { href: "#" }, "Forgot your password?")),
        React.createElement("div", null,
            React.createElement("button", { type: "submit", disabled: isLoading }, isLoading
                ? loadingSpinner
                : "Login")));
}
function LoginError({ errorType }) {
    const humanMessages = {
        'UserLocked': 'User is locked',
        'UserUnconfirmed': 'Please click the confirmation link we sent to your email before you can use this account',
        'InvalidCredentials': 'Invalid Credentials'
    };
    return React.createElement("div", { className: "thin-auth-alert", role: "alert" }, humanMessages[errorType]);
}
export function SignUp({ description, onLoginClick, appIcon = DEFAULT_APP_ICON, loadingSpinner = React.createElement(LoadingSpinner, { small: true }) }) {
    return React.createElement("div", { className: "thin-auth" },
        React.createElement("div", { className: "thin-auth-container" },
            React.createElement("div", { className: "thin-auth-container-inner" },
                React.createElement("div", { className: "thin-auth-box" },
                    React.createElement("div", { className: "thin-auth-icon-container" }, appIcon),
                    React.createElement(SignUpForm, { description: description, onLoginClick: onLoginClick, loadingSpinner: loadingSpinner })),
                React.createElement("div", { className: "thin-auth-built-with" },
                    React.createElement("a", { href: "https://thin.dev/?ref=NewSessionFooter", target: "_blank" }, "Built with Thin Backend")))));
}
function SignUpForm({ description = 'Sign up for an account to use this application.', onLoginClick, loadingSpinner }) {
    const [isLoading, setLoading] = useState(false);
    const [validationFailures, setValidationFailures] = useState([]);
    const [requiresEmailConfirmation, setRequiresEmailConfirmation] = useState(false);
    const onSubmit = async (event) => {
        event.preventDefault();
        const { email, password } = event.currentTarget;
        setLoading(true);
        setValidationFailures([]);
        const response = await AuthApi.createUser(email.value, password.value);
        if (response.tag === 'DidCreateUser') {
            const { userId, jwt, emailConfirmationRequired } = response;
            if (emailConfirmationRequired) {
                setRequiresEmailConfirmation(true);
            }
            else {
                didCompleteAuthentication(userId, jwt);
            }
        }
        else {
            setValidationFailures(response.validationFailures);
        }
        setLoading(false);
    };
    useEffect(() => {
        // Start the connection if it's not running yet
        // This way we have lower latency for the login
        DataSyncController.getInstance().startConnection();
    }, []);
    const emailValidationFailure = validationFailures.find(failure => failure[0] === 'email');
    const passwordValidationFailure = validationFailures.find(failure => failure[0] === 'passwordHash');
    if (requiresEmailConfirmation) {
        return React.createElement("div", null,
            React.createElement("h1", null, "Confirm your Email!"),
            React.createElement("p", null, "Before you can start, please quickly confirm your email address by clicking the link we've sent to your email address."),
            React.createElement("p", null,
                React.createElement("a", { href: "#", onClick: event => {
                        event.preventDefault();
                        onLoginClick();
                    } }, "Back to Login")));
    }
    return React.createElement("form", { method: "POST", action: "#", onSubmit: onSubmit },
        React.createElement("h1", null, "Sign Up"),
        React.createElement("p", { className: "thin-auth-description" }, description),
        React.createElement("div", { className: "thin-auth-form-group" },
            React.createElement("input", { name: "email", type: "email", placeholder: "E-Mail", required: true, autoFocus: true, autoComplete: "email", spellCheck: false, className: emailValidationFailure ? 'thin-auth-invalid' : '' }),
            emailValidationFailure && React.createElement("div", { className: "thin-auth-invalid-feedback" }, emailValidationFailure[1])),
        React.createElement("div", { className: "thin-auth-form-group" },
            React.createElement("input", { name: "password", type: "password", placeholder: "Password", autoComplete: "new-password", className: passwordValidationFailure ? 'thin-auth-invalid' : '' }),
            passwordValidationFailure && React.createElement("div", { className: "thin-auth-invalid-feedback" }, passwordValidationFailure[1])),
        React.createElement("div", null,
            React.createElement("button", { type: "submit", disabled: isLoading }, isLoading
                ? loadingSpinner
                : "Sign Up")),
        React.createElement("p", null,
            React.createElement("span", { className: "thin-auth-signup" }, "Already have an account?"),
            " ",
            React.createElement("a", { href: ihpBackendUrl('/NewUser'), onClick: () => { event.preventDefault(); onLoginClick(); } }, "Login")));
}
export function EmailConfirmation({ userId, token, onConfirmedAlready, onConfirmFailed }) {
    useEffect(() => {
        AuthApi.confirmUser(userId, token).then(result => {
            if (result.tag === 'DidConfirmUser') {
                didCompleteAuthentication(userId, result.jwt);
            }
            else if (result.tag === 'DidConfirmUserAlready') {
                onConfirmedAlready();
            }
            else if (result.tag === 'ConfirmUserFailed') {
                onConfirmFailed();
            }
        });
    });
    return React.createElement("div", { className: "thin-auth" },
        React.createElement("div", { className: "thin-auth-container" },
            React.createElement("div", { className: "thin-auth-container-inner" },
                React.createElement("div", { className: "thin-auth-box" },
                    React.createElement("div", { className: "thin-auth-icon-container" },
                        React.createElement("img", { src: "https://testvercelreview.thinbackend.app/thin-icon-black.png" })),
                    React.createElement("h1", null, "Confirming your Email..."),
                    React.createElement("div", { style: { display: 'flex', justifyContent: 'center' } },
                        React.createElement(LoadingSpinner, null))),
                React.createElement("div", { className: "thin-auth-built-with" },
                    React.createElement("a", { href: "https://thin.dev/?ref=NewSessionFooter", target: "_blank" }, "Built with Thin Backend")))));
}
function extractConfirmationParametersFromUrl() {
    const query = new URLSearchParams(window.location.search);
    if (query.has('email-confirmation') && query.has('userId') && query.has('token')) {
        const userId = query.get('userId');
        const token = query.get('token');
        // Remove parameters from the URL
        query.delete('email-confirmation');
        query.delete('userId');
        query.delete('token');
        const newQuery = query.toString();
        window.history.pushState({}, document.title, window.location.pathname + (newQuery.length > 0 ? '?' + newQuery : ''));
        return { userId, token };
    }
    return null;
}
function useEmailConfirmationParameters() {
    const [emailConfirmationParameters, setEmailConfirmationParameters] = useState(null);
    useEffect(() => {
        setEmailConfirmationParameters(extractConfirmationParametersFromUrl());
    }, []);
    return [emailConfirmationParameters, setEmailConfirmationParameters];
}
function LoadingSpinner({ small = false }) {
    const className = 'thin-auth-spinner-border' + (small ? ' thin-auth-spinner-border-sm' : '');
    return React.createElement("span", { className: className, role: "status", "aria-hidden": "true" });
}
