interface LoginSuccessfulResponse {
    tag: 'LoginSuccessful';
    userId: string;
    jwt: string;
}
interface UserLockedResponse {
    tag: 'UserLocked';
}
interface UserUnconfirmedResponse {
    tag: 'UserUnconfirmed';
}
interface InvalidCredentialsResponse {
    tag: 'InvalidCredentials';
}
declare type LoginResponse = LoginSuccessfulResponse | UserLockedResponse | UserUnconfirmedResponse | InvalidCredentialsResponse;
export declare type LoginError = 'UserLocked' | 'UserUnconfirmed' | 'InvalidCredentials';
export declare function loginWithEmailAndPassword(email: string, password: string): Promise<LoginResponse>;
interface DidCreateUser {
    tag: 'DidCreateUser';
    userId: string;
    emailConfirmationRequired: boolean;
    jwt: string;
}
interface CreateUserFailed {
    tag: 'CreateUserFailed';
    validationFailures: [[string, string]];
}
export declare function createUser(email: string, password: string): Promise<DidCreateUser | CreateUserFailed>;
interface DidConfirmUser {
    tag: 'DidConfirmUser';
    jwt: string;
}
interface DidConfirmUserAlready {
    tag: 'DidConfirmUserAlready';
}
interface ConfirmUserFailed {
    tag: 'ConfirmUserFailed';
}
export declare function confirmUser(userId: string, token: string): Promise<DidConfirmUser | ConfirmUserFailed | DidConfirmUserAlready>;
export {};
